---
title: "Population dividend"
subtitle: "Animation of population by age over time"
author: "James Goldie, 360info"
date: "2022-11-08"
code-fold: true
---

```{r}
#| label: setup
library(tidyverse)
library(lubridate)
library(gganimate)
library(themes360info)
library(ragg)
library(here)
```

First, let's download the UN population observations and projections.

:::{.callout-note}
Note
:::

```{r}
#| label: import

# NOTE - an OpenSSL conf is supplied with this workspace to allow downloading
# data from a UN population server that is improperly configured. be aware that
# an attacker could try to mimic this server when you are downloading this data.

expected_obs_fname <- "WPP2022_PopulationBySingleAgeSex_Medium_1950-2021.csv"
expected_proj_fname <- "WPP2022_Population1JanuaryBySingleAgeSex_Medium_2022-2100.csv"
url_base <- paste0(
  "https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)",
  "/CSV_FILES/WPP2022_Population1JanuaryBySingleAgeSex_")
options(timeout = max(300, getOption("timeout")))

# download + unzip the obs if they're unavailable
if (!file.exists(here("data", expected_obs_fname))) {
  obs_file <- "Medium_1950-2021.zip"
  temp_zip_obs <- tempfile(fileext = ".zip")
  download.file(paste0(url_base, obs_file), temp_zip_obs)
  unzip(temp_zip_obs, exdir = here("data"))
}

# download + unzip the projections if they're unavailable
if (!file.exists(here("data", expected_proj_fname))) {
  proj_file <- "Medium_2022-2100.zip"
  temp_zip_proj <- tempfile(fileext = ".zip")
  download.file(paste0(url_base, proj_file), temp_zip_proj)
  unzip(temp_zip_proj, exdir = here("data"))
}

# import into r

here("data", expected_obs_fname) |>
  read_csv() ->
pop_obs

here("data", expected_proj_fname) |>
  read_csv() ->
pop_proj
```

```{r}
#| label: tidy-fn

get_combined_figures <- function(df) {
  df %>%
    select(Time, AgeGrpStart, starts_with("Pop")) %>%
    mutate(across(starts_with("Pop"), ~ .x * 1000)) ->
  pop_world

  # work out proportions toolspop_world %>%
  pop_world %>%
    group_by(Time) %>%
    mutate(
      measure = "Percentage of people",
      across(starts_with("Pop"), ~ .x / sum(.x, na.rm = TRUE) * 100)) ->
  pop_prop_world

  pop_world %>%
    mutate(measure = "Number of people") %>%
    bind_rows(pop_prop_world) ->
  pop_combined

  return(pop_combined)
}
```

```{r}
#| label: animate-fn

render_pop_curve <- function(df, country, path, video = FALSE) {

  p <- ggplot(df) +
    aes(x = AgeGrpStart, y = PopTotal) +
    transition_time(Time) +
    enter_grow() + 
    exit_shrink() +
    ease_aes("sine-in-out") +
    annotate("rect",
      xmin = 16, xmax = 65, ymin = -Inf, ymax = Inf,
      colour = NA,
      fill = colours_360("lightblue"), alpha = 0.5
    ) +
    annotate("text", label = "WORKING AGE",
      x = 40.5,
      y = Inf,
      hjust = 0.5, vjust = 2,
      size = 6, alpha = 0.5) +
    geom_col(fill = "#222222") +
    scale_y_continuous(
      labels = scales::label_number(scale_cut = scales::cut_short_scale()),
      expand = expansion(c(0, 0.1))) +
    theme_minimal(base_size = 14) +
    labs(x = "Age", y = "Population",
      title = paste(country, "population in {as.integer(frame_time)}"))

  if (video) {

    anim_save(
      file.path(path, paste0(country, ".mov")),
      animate(p,
        nframes = max(df$Time, na.rm = TRUE) - min(df$Time, na.rm = TRUE) + 1,
        device = "ragg_png", width = 1920, height = 1080,
        renderer = ffmpeg_renderer(ffmpeg = "/opt/homebrew/bin/ffmpeg")))

  } else {

    dir.create(file.path(path, country), showWarnings = FALSE)

    anim_save(
      file.path(path, country),
      animate(p,
        nframes = max(df$Time, na.rm = TRUE) - min(df$Time, na.rm = TRUE) + 1,
        device = "svglite", width = 8, height = 4.5,
        renderer = file_renderer(file.path(path, country),
          prefix = paste0(country, "-"), overwrite = TRUE)))
  }

  return(invisible(df))
}
```

Add `video = TRUE` to `render_pop_curve` in the sections below to export a quick video instead of SVG frames. (Note if you're rendering the whole doc: the frame renderer is throwing an error, even though it outputs correctly.)

# Regional age waves

## Global population

```{r}
#| label: world

pop_obs %>%
  filter(Location == "World") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("World", here("out"), video = TRUE) %>%
  render_pop_curve("World", here("out"))
```

## India

```{r}
#| label: india

pop_obs %>%
  filter(Location == "India") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("India", here("out"), video = TRUE) %>%
  render_pop_curve("India", here("out"))
```

## China

```{r}
#| label: china

pop_obs %>%
  filter(Location == "China") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("China", here("out"), video = TRUE) %>%
  render_pop_curve("China", here("out"))
```

## Australia

```{r}
#| label: australia

pop_obs %>%
  filter(Location == "Australia") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("Australia", here("out"), video = TRUE) %>%
  render_pop_curve("Australia", here("out"))
```

## Indonesia

```{r}
#| label: indonesia

pop_obs %>%
  filter(Location == "Indonesia") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("Indonesia", here("out"), video = TRUE) %>%
  render_pop_curve("Indonesia", here("out"))
```

## Japan

```{r}
#| label: japan

pop_obs %>%
  filter(Location == "Japan") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("Japan", here("out"), video = TRUE) %>%
  render_pop_curve("Japan", here("out"))
```


## Malaysia

```{r}
#| label: malaysia

pop_obs %>%
  filter(Location == "Malaysia") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("Malaysia", here("out"), video = TRUE) %>%
  render_pop_curve("Malaysia", here("out"))
```

## South Korea

```{r}
#| label: south-korea

pop_obs %>%
  filter(Location == "Republic of Korea") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("South Korea", here("out"), video = TRUE) %>%
  render_pop_curve("South Korea", here("out"))
```

## Tuvalu

```{r}
#| label: tuvalu

pop_obs %>%
  filter(Location == "Tuvalu") %>%
  get_combined_figures() %>%
  filter(measure == "Number of people") %>%
  render_pop_curve("Tuvalu", here("out"), video = TRUE) %>%
  render_pop_curve("Tuvalu", here("out"))
```

# Elderly in selected countries

```{r}
#| label: elderly-selected

# confirm 

pop_obs |>
  bind_rows(pop_proj) |>
  filter(Location %in% c("Japan", "Singapore", "Malaysia", "Australia", "India",
    "Hong Kong", "Italy")) ->
pop_selected

# verify only single-age buckets. looks like a span of -1 is used for the
# open-ended "age 100+" bucket
stopifnot(
  "Analysis expected only single-age buckets and an open-ended elderly bucket,
    but there are buckets with several ages in them." =
  (pop_selected |> pull(AgeGrpSpan) |> unique()) == c(1, -1))

pop_selected |>
  mutate(
    age_group = case_match(AgeGrpStart,
      0:14 ~ "dependent",
      15:64 ~ "working",
      65:150 ~ "dependent")) |>
  group_by(ISO3_code, Location, Time, age_group) |>
  summarise(
    n_male = sum(PopMale, na.rm = TRUE),
    n_female = sum(PopFemale, na.rm = TRUE),
    n_total = sum(PopTotal, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(names_from = age_group, values_from = starts_with("n_")) |>
  mutate(
    r_male_dependent = n_male_dependent / n_male_working,
    r_male_working = n_male_working / n_male_dependent,
    r_female_dependent =
      n_female_dependent / n_female_working,
    r_female_working =
      n_female_working / n_female_dependent,
    r_total_dependent =
      n_total_dependent / n_total_working,
    r_total_working =
      n_total_working / n_total_dependent,
    # finally, multiply numbers by 1000
    across(starts_with("n_"), ~ .x * 1000)) |>
  mutate(
    time_period = case_match(Time,
      1950:2021 ~ "observed",
      2022:2100 ~ "projected")) |>
  write_csv(here("data", "dependency-ratios-selectedcountries.csv")) ->
dep_ratio_selected
```

For Flourish, let's widen by country:

```{r}
#| label: widen-dep-ratio

dep_ratio_selected |>
  select(Location, Time, r_total_dependent) |>
  pivot_wider(names_from = Location, values_from = r_total_dependent) |>
  write_csv(here("data", "dep-ratio-wide.csv"))

```

```{r}
#| label: plot-dependency-ratio

dep_ratio_selected |>
  ggplot() +
    aes(
      linetype = time_period,
      x = Time,
      y = r_total_dependent * 100) +
    geom_line() +
    facet_wrap(vars(Location)) +
    theme_360() +
    theme(
      legend.position = "top",
      legend.direction = "horizontal") +
    labs(
      x = NULL, y = "Dependency ratio",
      title = "Dependency ratio",
      linetype = NULL,
      subtitle = paste(
        "Dependency ratio measures how many dependent children and elderly",
        "people<br>there are for every 100 working age people (15â€“64 years)"))
```

```{r}
#| label: plot-dependent-numbers

dep_ratio_selected |>
  ggplot() +
    aes(
      linetype = time_period,
      x = Time,
      y = n_total_dependent) +
    geom_line() +
    facet_wrap(vars(Location), scales = "free_y") +
    scale_y_continuous(
      labels = scales::label_number(scale_cut = scales::cut_short_scale())) +
    theme_360() +
    theme(
      legend.position = "top",
      legend.direction = "horizontal") +
    labs(
      x = NULL, y = "Number of people",
      linetype = NULL,
      title = "Growing elderly")
```